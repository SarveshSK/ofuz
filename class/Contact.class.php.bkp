<?php 
    /**
     * Contact class
     * Using the DataObject
     */
 
class Contact extends DataObject {
    
    public $table = "contact";
    protected $primary_key = "idcontact";
    
    private $report = Array (
      "list_contacts"
      );
    private $savedquery = Array (
      "all_contacts"
    ); 
    
    public $search_keyword = "";
    private $search_tags = Array();
    private $sql_view_name = "";

    public $sql_orderf = "lastname";
    public $sql_limitf = "50";

    function __construct(sqlConnect $conx=NULL, $table_name="") {
       parent::__construct($conx, $table_name);
       $this->setLogRun(RADRIA_LOG_RUN_OFUZ);

    }    
    /**
     * Create a view to speed things and improve the filters on the
     * contacts.php view.
     * The view is a users set of contact and uses the users userid.
     */

/**
Add all the tags in one field using:
GROUP_CONCAT([DISTINCT] expr [,expr ...]
             [ORDER BY {unsigned_integer | col_name | expr}
	                      [ASC | DESC] [,col_name ...]]
			                   [SEPARATOR str_val])
**/

    function createViewUserContact($iduser=0) {
        if (empty($iduser)) {
            $iduser = $_SESSION['do_User']->iduser;
        }
       $this->sql_view_name = "userid".$iduser."_contact";
       
       $this->query("CREATE view ".$this->sql_view_name." AS 
                         SELECT contact.idcontact as idcontact,         
                                contact.firstname as firstname,         
                                contact.lastname as lastname,        
                                contact.company as company,   
                                contact.idcompany as idcompany,     
                                contact.position as position,        
                                contact_email.email_address as email_address, 
                                contact_phone.phone_number,         
                                contact_phone.phone_type 
                            FROM  contact LEFT JOIN contact_email ON contact.idcontact = contact_email.idcontact 
                                          LEFT JOIN contact_phone ON contact.idcontact = contact_phone.idcontact 
                            WHERE contact.iduser = ".$iduser."
                            GROUP BY contact.idcontact");

    }

    /**
     * getSqlViewName()
     * This is the name of the user's contact view
     * @return string name of the sql view
     */

    function getSqlViewName() {
        return $this->sql_view_name;
    }
    /**
     * Set the company id for the contact
     * and create a new one if doesn't exists.
     * @param object EventControler
     */
     
    function eventSetCompany(EventControler $event_controler) {
    	$fields = $event_controler->getParam('fields');
    	$newCompany = new Company($this->getDbCon());
    	$newCompany->query("select * from company where name='".trim($fields['company'])."'");
    	if (!$newCompany->hasData()) {
    	  $newCompany->name = trim($fields['company']);
    	  $newCompany->add();
    	  $newCompanyid = $newCompany->getInsertId($this->getTable(), $this->getPrimaryKey());
    	} else {
    	  $newCompanyid = $newCompany->idcompany;
    	}
    	$fields['idcompany'] = $newCompanyid;
        //print_r($fields);exit;
    	$this->setLog("\n Company id:".$fields['idcompany']." for ".$fields['company']);
    	$event_controler->updateParam("fields", $fields);
    	return true;
    }

    function addPhone($number, $type){
        $new_phone = new ContactPhone();
    	$new_phone->idcontact = $this->idcontact;
    	$new_phone->phone_number = $number;
    	$new_phone->phone_type = $type;
    	$new_phone->add();
    }

    function addAddress($address, $type){
        $new_address = new ContactAddress();
    	$new_address->idcontact = $this->idcontact;
    	$new_address->address = $address;
    	$new_address->address_type = $type;
    	$new_address->add();
    }

    function addEmail($email, $type){
        $new_email = new ContactEmail();
    	$new_email->idcontact = $this->idcontact;
    	$new_email->email_address = $email;
    	$new_email->email_type = $type; 
    	$new_email->add();
    }

    /**
     * getContactDetails()
     * Get the contacts for a define contact id.
     * Right now same as getId() but in the future we will link it
     * to the auth_contact to check if the users is authorize to view 
     * that contact.
     * @param int contact primary  key value.
     */

    function getContactDetails($idcontact) {
        $this->query("select * from contact where idcontact = " . $idcontact);
    }

    function updateAddress($address, $type, $idcontact_address){
        $ca_address = new ContactAddress();
        $ca_address->getId($idcontact_address); // Primarykey id of the record to update
    	$ca_address->address = $address;
    	$ca_address->address_type = $type;
    	$ca_address->update();
    }

    function updatePhone($number, $type, $idcontact_phone){
        $cp_phone = new ContactPhone();
        $cp_phone->getId($idcontact_phone); // Primarykey id of the record to update
    	$cp_phone->phone_number = $number;
    	$cp_phone->phone_type = $type;
    	$cp_phone->update();
    }

    function updateEmail($email, $type, $idcontact_email){
        $ce_email = new ContactEmail();
        $ce_email->getId($idcontact_email); // Primarykey id of the record to update
    	$ce_email->email_address = $email;
    	$ce_email->email_type = $type;
    	$ce_email->update();
    }

    function addNewContact($idusers,$firstname,$lastname,$idcompany,$company,$position){
      $this->idusers = $idusers;
      $this->firstname = $firstname;
      $this->lastname = $lastname;
      $this->idcompany = $idcompany;
      $this->company = $company;
      $this->position = $position;
      $this->add();
    }
    /**
     * Method to generate the link to contact detail page
     * when a task is realted to any contact
    */
    function getContactNameTaskRelated($idcontact){
      $q = new sqlQuery($this->getDbCon());
      $q->query("select firstname,lastname from contact where idcontact =".$idcontact);
      $q->fetch();
      $fname = $q->getData("firstname");
      $lname = $q->getData("lastname");
      $fullname = $fname.' '.$lname;

      $currentpage = "contact.php";
      $e_detail = new Event("mydb.gotoPage");
      $e_detail->addParam("goto", "contact.php");
      $e_detail->addParam("idcontact",$idcontact);
      $e_detail->addParam("tablename", "contact");
      $e_detail->requestSave("eDetail_contact", $currentpage);
      $output = '&nbsp;(Re: Note about <a style="color:red;" href = "'.$e_detail->getUrl().'">'.$fullname.'</a>)';
      return $output;
    }

     function getContactNameContactRelatedTask($idcontact){
      $q = new sqlQuery($this->getDbCon());
      $q->query("select firstname,lastname from contact where idcontact =".$idcontact);
     // echo "select firstname,lastname from contact where idcontact =".$idcontact." and from_note = 0";
      $q->fetch();
      $fname = $q->getData("firstname");
      $lname = $q->getData("lastname");
      $fullname = $fname.' '.$lname;

      $currentpage = "contact.php";
      $e_detail = new Event("mydb.gotoPage");
      $e_detail->addParam("goto", "contact.php");
      $e_detail->addParam("idcontact",$idcontact);
      $e_detail->addParam("tablename", "contact");
      $e_detail->requestSave("eDetail_contact", $currentpage);
      $output = '&nbsp;(<a style="color:red;" href = "'.$e_detail->getUrl().'">'.$fullname.'</a>)';
      return $output;
    }


    function getCompanyRelatedContacts($idcompany){
        /*$this->query("select * from contact where idcompany = ".$idcompany." AND
                      iduser = ".$_SESSION['do_User']->iduser); */
          $this->query("select contact.idcontact as idcontact ,contact.firstname as firstname,
                        contact.lastname,contact_email.email_address as email_address, contact_phone.phone_number
                        as phone_number,contact_website.website as website
                        FROM contact 
                        LEFT JOIN contact_email ON contact.idcontact = contact_email.idcontact 
                        LEFT JOIN contact_phone ON contact.idcontact = contact_phone.idcontact
                        LEFT JOIN contact_website ON contact.idcontact = contact_website.idcontact
                        where iduser = ".$_SESSION['do_User']->iduser." AND
                        contact. idcompany = ".$idcompany.
                        " GROUP BY contact.idcontact");
    }
    /**
     * getLastUpdate()
     * Method that returns the last time that Contact was updated.
     * @return string with a date (sql format)
     */

    function getLastUpdate() {
        return UpdateRecordLog::lastUpdate($this->getTable(),
                                           $this->getPrimaryKeyValue());
    }

    /** 
     * getCreateDate()
     * Return the date when this contact got created.
     * @return string with a date (sql format)
     */

    function getCreateDate() {
        return NewRecordLog::createDate($this);
    }

    /**
     * Overload the add() method to add created date in the NewRecordLog
     */

    function add() {
      parent::add();
      if ($this->getPrimaryKeyValue() > 0) {
        $rlog = new NewRecordLog();
        $rlog->setCreateDate($this->getTable(), $this->getPrimaryKeyValue());
      }
    }
    /**
     * Overload the update() method to add last update date in UpdateRecordLog
     */
    function update() {
      parent::update();
      if ($this->getPrimaryKeyValue() > 0) {
        $rlog = new UpdateRecordLog();
        $rlog->setLastUpdate($this->getTable(), $this->getPrimaryKeyValue());
      }
    }
    
    /** 
     * Overload delete to delete all dependent and child data
     */
     function delete() {
         $do_contact_address = $this->getChildContactAddress();
         while ($do_contact_address->next()) {
             $do_contact_address->delete();
         }
         $do_contact_email = $this->getChildContactEmail();
         while ($do_contact_email->next()) {
             $do_contact_email->delete();
         }
         $do_contact_instant_message = $this->getChildContactInstantMessage();
         while ($do_contact_instant_message->next()) {
             $do_contacat_instant_message->delete();            
         }
         $do_contact_phone = $this->getChildContactPhone();
         while ($do_contact_phone->next()) {
             $do_contact_phone->delete();
         }
         
         // Need to check if there is no associated single tag.
         // FIXME when tags is redesigned in 1 table.
         
         $do_contact_notes = $this->getChildContactNotes();
         while ($do_contact_notes->next()) {
             $do_contact_notes->delete();
         }
         
         // Need to check if the company will not be orphane once this contact is deleted.
         // if yes delete the company as well.
         // FIXME
         
         //parent::delete();
         // Need to check if the current user is authorized to delete the contact
         // Can't use this here as we have a multiple record to delete in the current result set.
         $q_del = new sqlQuery($this->getDbCon());
         $q_del->query("DELETE FROM contact WHERE iduser=".$_SESSION['do_User']->iduser." AND idcontact=".$this->idcontact);
         $q_del->free();   
     }
    
    /**
     * eventSetSearch
     * Set the keywords in object and create an SQL query
     * with the keywords. Set the sqlquery for use in the contacts.php page.
     * @param EventControler event controler object to get params and set DisplayNext.
     */

    function eventSetSearch(EventControler $event_controler) {
        $this->search_keyword = $event_controler->contacts_search;
        $this->search_tags = Array();
        $this->setSqlQuery("SELECT contact.idcontact as idcontact,contact.firstname as firstname,contact.lastname as lastname,contact.company as company,contact.idcompany as idcompany,contact.position as position,contact_email.email_address as email_address, contact_phone.phone_number, contact_phone.phone_type
        FROM contact 
            LEFT JOIN contact_email ON contact.idcontact = contact_email.idcontact 
            LEFT JOIN contact_phone ON contact.idcontact = contact_phone.idcontact
        WHERE   contact.iduser = ".$_SESSION['do_User']->iduser."
          AND ( contact.firstname LIKE '%".$this->search_keyword."%'
             OR contact.lastname LIKE '%".$this->search_keyword."%'
             OR contact.company LIKE '%".$this->search_keyword."%')
        GROUP BY contact.idcontact");
        $event_controler->setDisplayNext(new Display($event_controler->goto));
    }
    

    function getContactSuggestionSearch($str) {
        $this->setSqlQuery("SELECT contact.idcontact as idcontact,contact.firstname as firstname,contact.lastname as lastname
        FROM contact 
        WHERE   contact.iduser = ".$_SESSION['do_User']->iduser."
          AND ( contact.firstname LIKE '%".$str."%'
             OR contact.lastname LIKE '%".$str."%'
             OR contact.company LIKE '%".$str."%')
        GROUP BY contact.idcontact");
    }
    
    /**
     * eventSearchByTag()
     * Set the contacts query to filter contacts by selected tags.
     */
     
     function eventSearchByTag(EventControler $event_controler) {
        if (strlen($event_controler->search_add_tag_name)>0) {
            if (!in_array($event_controler->search_tag_name, $this->search_tags)) {
                $this->search_tags[] = $event_controler->search_add_tag_name;
            }
        }
        if (strlen($event_controler->search_tag_name)>0) {
            $this->search_tags = Array( $event_controler->search_tag_name );
        }
        if (strlen($event_controler->search_remove_tag_name)>0) {
            $cur_tags = $this->getSearchTags();
            $this->search_tags = Array();
            foreach ($cur_tags as $cur_tag) {
                if ($cur_tag != $event_controler->search_remove_tag_name) {
                    $this->search_tags[] = $cur_tag;
                }
            }            
        }
        if (!empty($this->search_tags)) {
            if (strlen($this->getSqlViewName()) == 0) {
               $this->createViewUserContact();
            }
            $sql_search = "SELECT contact.idcontact as idcontact, count(contact.idcontact) as num_match, contact.firstname as firstname,contact.lastname as lastname,contact.company as company,contact.position as position, contact.email_address as email_address, contact.phone_number, contact.phone_type
                  FROM tag, ".$this->getSqlViewName()." as contact 
                  WHERE  tag.reference_type = 'contact'
                     AND tag.idreference = contact.idcontact AND (";
            $first = true;
            foreach ($this->search_tags as $search_tag) {
                if ($first) { $first = false ; } else { $sql_search .= " OR "; }
                $sql_search .= " tag.tag_name = '".$search_tag."'";
            }
            $sql_search .= ")";
            $sql_search .= " GROUP BY contact.idcontact HAVING num_match = ".count($this->search_tags);
            $this->setLog("\n tag search with SQLQuery:".$sql_search);
        } else {
             $sql_search = "SELECT contact.idcontact as idcontact,contact.firstname as firstname,contact.lastname as lastname,contact.company as company,contact.position as position,contact_email.email_address as email_address, contact_phone.phone_number, contact_phone.phone_type
                  FROM contact 
                    LEFT JOIN contact_email ON contact.idcontact = contact_email.idcontact 
                    LEFT JOIN contact_phone ON contact.idcontact = contact_phone.idcontact
                  WHERE   contact.iduser = ".$_SESSION['do_User']->iduser." ";
        }
        $this->setSqlQuery($sql_search);
        $event_controler->setDisplayNext(new Display($event_controler->goto));
         
     }
     
    /**
     * eventDeleteMultiple
     * this method delete contacts using the "ck" array from the contact list.
     * Currently also adding the userid in the where but this will need to 
     * be changed as multiple users may have the right to deleted contacts.
     */
    
    function eventDeleteMultiple(EventControler $event_controler) {
        if (strlen($event_controler->tags)==0) {
            $this->setLog("\n Not tags deleting contacts");
            $contacts = $event_controler->getParam("ck");
            $do_deleting_contact = new Contact();
            foreach ($contacts as $idcontact) {
                $this->setLog("\n deleting contact:".$idcontact);
                $do_deleting_contact->getId($idcontact);
                $do_deleting_contact->delete();
            }
            $do_deleting_contact->free();
        }
    }
    
    /**
     * eventAddTagMultiple
     * Triggered form the contacts.php page when assigning multiple tags 
     * to a single contact.
     */
     
    function eventAddTagMultiple(EventControler $event_controler) {
        $tags = explode(",", $event_controler->tags);
        $contacts = $event_controler->getParam("ck");
        $do_tag = new Tag();
        foreach ($contacts as $idcontact) {
            foreach ($tags as $tag) {
                $tag = trim($tag);
                $do_tag->addNew();
                $do_tag->addTagAssociation($idcontact, $tag, "contact");
            }
        }
        
    }

    function eventdelContactTagById(EventControler $event_controler){
      $do_tag =new Tag();
      $idtag = $event_controler->getParam("id");
      $do_tag->delTagById($idtag);
    }
    /**
     * getTags()
     * return an array with the list of tags associated with this user.
     * return tags primarykey
     */
    function getTags() {
        $q_tags = new sqlQuery($this->getDbCon());
        $q_tags->query("SELECT idtag FROM tag WHERE idreference=".$this->idcontact." AND reference_type='".$this->getTableName()."' ORDER BY tag_name");
        while ($q_tags->fetch()) {
           $a_tag[] = $q_tags->getData("idtag");
        }
        return $a_tag;
    }
    
    /**
     * getSearchTags
     * Return an array with all the tags currently norrowing the search
     */
    function getSearchTags() {
        return $this->search_tags;
    }

    function formatTextDisplay($text){
      /**
        $text = preg_replace("/([0-9]{3})([0-9]{3})([0-9]{4})/", "($1) $2-$3", $text); //phone number replace
        $text = preg_replace("/([0-9]{5})([0-9]{4})?/", "$1-$2", $text); //zip code replace
     */
      $ret = ereg_replace("[a-zA-Z]+://([.]?[a-zA-Z0-9_/-])*", "<a href=\"\\0\" target = \"_blank\">\\0</a>", $text);
      $ret = ereg_replace("(^| )(www([.]?[a-zA-Z0-9_/-])*)", "\\1<a href=\"http://\\2\" target = \"_blank\">\\2</a>", $ret);
      $ret = preg_replace("/([\w\.]+)(@)([\S\.]+)\b/i","<a href=\"mailto:$1@$3\">$1@$3</a>",$ret);
      return ($ret) ;
    }

    function formatTextDisplayWithStyle($text){
      /**
        $text = preg_replace("/([0-9]{3})([0-9]{3})([0-9]{4})/", "($1) $2-$3", $text); //phone number replace
        $text = preg_replace("/([0-9]{5})([0-9]{4})?/", "$1-$2", $text); //zip code replace
     */
      $ret = ereg_replace("[a-zA-Z]+://([.]?[a-zA-Z0-9_/-])*", "<a style =\"color:orange;\" href=\"\\0\" target = \"_blank\">\\0</a>", $text);
      $ret = ereg_replace("(^| )(www([.]?[a-zA-Z0-9_/-])*)", "\\1<a style =\"color:orange;\" href=\"http://\\2\" target = \"_blank\">\\2</a>", $ret);
      $ret = preg_replace("/([\w\.]+)(@)([\S\.]+)\b/i","<a style =\"color:orange;\" href=\"mailto:$1@$3\">$1@$3</a>",$ret);
      return ($ret) ;
    }

    function getContactFullName($idcontact){
       $q = new sqlQuery($this->getDbCon());
       $q->query("select firstname,lastname from contact where idcontact = ".$idcontact) ;
       //echo "select firstname.lastname from contact where idcontact = ".$idcontact;
       while($q->fetch()){
          $fname = $q->getData("firstname");
          $lname = $q->getData("lastname");
       }
       return $fname.' '.$lname;
    }
}
?>
